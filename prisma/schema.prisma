generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  username      String?         @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  // UserProgress  UserProgressUnit[]
  MainQuestions MainQuestions[]
}

model Course {
  id    String @id @default(cuid()) @map("_id")
  name  String
  units Unit[]
}

model Unit {
  id         String     @id @default(cuid()) @map("_id")
  courseId   String
  noidnumber Int        @default(1)
  name       String
  completed  Boolean    @default(false)
  progress   Int        @default(0)
  questions  Question[]
  Course     Course     @relation(fields: [courseId], references: [id])
}

model Question {
  id            String          @id @default(cuid()) @map("_id")
  Unit          Unit            @relation(fields: [unitId], references: [id])
  unitId        String
  name          String
  description   String?
  mainQuestions String[]
  MainQuestions MainQuestions[]
}

model MainQuestions {
  id           String   @id @default(cuid()) @map("_id")
  questionid   String
  whatquestion String
  answer       String
  question     Question @relation(fields: [questionid], references: [id])
  userid       String
  User         User     @relation(fields: [userid], references: [id])
}
