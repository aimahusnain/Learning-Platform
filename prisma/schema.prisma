generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   String                 @id @default(cuid()) @map("_id")
  name                 String?                @unique
  email                String?                @unique
  emailVerified        DateTime?
  username             String?                @unique
  image                String?
  accounts             Account[]
  sessions             Session[]
  // UserProgress  UserProgressUnit[]
  UserProgress         UserProgress[]
  UserProgressQuestion UserProgressQuestion[]
}

model Course {
  id    String @id @default(cuid()) @map("_id")
  name  String
  units Unit[]
}

model Unit {
  id         String     @id @default(cuid()) @map("_id")
  courseId   String
  noidnumber Int        @default(1)
  name       String
  completed  Boolean    @default(false)
  progress   Int        @default(0)
  questions  Question[]
  Course     Course     @relation(fields: [courseId], references: [id])
}

model Question {
  id                   String                 @id @default(cuid()) @map("_id")
  Unit                 Unit                   @relation(fields: [unitId], references: [id])
  unitId               String
  name                 String
  description          String?
  mainQuestions        String[]
  Submitted            Boolean    @default(false)
  MainQuestions        MainQuestions[]
  UserProgress         UserProgress[]
  UserProgressQuestion UserProgressQuestion[]
}

model MainQuestions {
  id           String   @id @default(cuid()) @map("_id")
  questionid   String
  whatquestion String
  answer       String
  question     Question @relation(fields: [questionid], references: [id])
}

model UserProgress {
  id          String    @id @default(cuid()) @map("_id")
  userEmail   String
  Submitted   Boolean   @default(false)
  questionsId String?
  Question    Question? @relation(fields: [questionsId], references: [id])
  User        User      @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}

// Optional
model UserProgressQuestion {
  id         String   @id @default(cuid()) @map("_id")
  progress   Int
  userAnswer String
  questionId String
  Question   Question @relation(fields: [questionId], references: [id])
  userEmail  String
  User       User     @relation(fields: [userEmail], references: [email])
}
