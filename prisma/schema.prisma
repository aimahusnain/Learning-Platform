generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id    String @id @default(cuid()) @map("_id")
  name  String
  units Unit[]
}

model Unit {
  id                  String     @id @default(cuid()) @map("_id")
  courseId            String
  noidnumber          Int        @default(1)
  name                String
  videoReferenceVideo String?
  completed           Boolean    @default(false)
  progress            Int        @default(0)
  questions           Question[]
  Course              Course     @relation(fields: [courseId], references: [id])
}

model Question {
  id                       String                     @id @default(cuid()) @map("_id")
  Unit                     Unit                       @relation(fields: [unitId], references: [id])
  unitId                   String
  questionNo               String?
  idea                     String?
  description              String?
  name                     String
  Image                    String?
  MainQuestions            MainQuestions[]
  UserProgress             UserProgress[]
  UserProgressQuestion     UserProgressQuestion[]
  UserProgressMainQuestion UserProgressMainQuestion[]
}

// model UserProgressQuestion {
//   id        String   @id @map("_id")
//   progress  Int?     @default(0)
//   submitted Boolean  @default(false)
//   userEmail String
//   User      User?     @relation(fields: [userEmail], references: [email])
//   Question  Question? @relation(fields: [id], references: [id])
// }

model UserProgressQuestion {
  id        String    @id @map("_id")
  progress  Int?      @default(0)
  submitted Boolean   @default(false)
  userEmail String
  User      User?     @relation(fields: [userEmail], references: [email])
  Question  Question? @relation(fields: [id], references: [id])
}

model UserProgressMainQuestion {
  id               String          @id @default(cuid()) @map("_id")
  userAnswer       String
  userAnswer2      String?
  correct          Boolean         @default(false)
  correct2         Boolean?
  userEmail        String
  User             User            @relation(fields: [userEmail], references: [email])
  mainQuestionsId  String
  MainQuestions    MainQuestions?  @relation(fields: [mainQuestionsId], references: [id])
  questionId       String
  Question         Question?       @relation(fields: [questionId], references: [id])
  mainQuestions2Id String?
}

model User {
  id                       String                     @id @default(cuid()) @map("_id")
  name                     String?                    @unique
  email                    String?                    @unique
  emailVerified            DateTime?
  username                 String?                    @unique
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  UserProgress             UserProgress[]
  UserProgressQuestion     UserProgressQuestion[]
  UserProgressMainQuestion UserProgressMainQuestion[]
}

model MainQuestions {
  id                       String                     @id @default(cuid()) @map("_id")
  question                 Question                   @relation(fields: [questionid], references: [id])
  questionid               String
  whatquestion             String
  answer1                  String?
  whatquestionOption1      String?
  whatquestionOption2      String?
  answer2Question          String?
  answer2                  String?
  UserProgressMainQuestion UserProgressMainQuestion[]
}

model UserProgress {
  id          String    @id @default(cuid()) @map("_id")
  userEmail   String
  Submitted   Boolean   @default(false)
  questionsId String?
  Question    Question? @relation(fields: [questionsId], references: [id])
  User        User      @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}
